☆eraSQR의입덧쓰기를 위한 Tips를 erahetaA 사양에 고쳐 쓴 것
  신판 템플릿을 사용하기 위해서(때문에) 유용할 것 같은 지식을 써 두려고 생각합니다

;--□ 초급편 □-----------------------------------------------------------------------------------

@무엇은 없어도 사쿠라 에디터를 사용합시다
  메모장으로 기술하고 있는 (분)편은,부디 사쿠라 에디터를 도입해 봐 주세요.
  버그를 억제할 수 있어 작업 효율이 오릅니다.
  
  Wiki에 개발용 툴의 기재가 있습니다.
  http://www26.atwiki.jp/erasq/pages/51.html


@기입 체크와 소분기의 추가/삭제
예 1)
  ;-------------------------------------------------
  LOCAL = 1
  ;-------------------------------------------------
  IF LOCAL
  	;-------------------------------------------------
  	;소분기
  	;-------------------------------------------------
  	;연모루트
  	;기입 체크
  	LOCAL:1 = 0
  	;-------------------------------------------------
  	IF LOCAL:1 && (TALENT:3 || TALENT:6)
  		PRINTFORMW 
  		RETURN LOCAL
  	ENDIF
  	;-------------------------------------------------
  	;음란루트
  	;기입 체크
  	LOCAL:1 = 1
  	;-------------------------------------------------
  	IF LOCAL:1 && (TALENT:4 || TALENT:7)
  		PRINTFORMW 주인님 에로한 일 해!
  		RETURN LOCAL
  	ENDIF
  	;-------------------------------------------------
  	;복종루트
  	;기입 체크
  	LOCAL:1 = 1
  	;-------------------------------------------------
  	IF LOCAL:1 && (TALENT:5 || TALENT:8)
  		PRINTFORMW 나는 주인님의 개입니다!
  		RETURN LOCAL
  	ENDIF
  ;일반
  	PRINTFORMW 주인님이라든지 없어요―
  	RETURN LOCAL
  ENDIF
  
예 2)
  ;음란루트
  IF TALENT:4 || TALENT:7
  	PRINTFORMW 주인님 에로한 일 해!
  ;복종루트
  ELSEIF TALENT:5 || TALENT:8
  	PRINTFORMW 주인님 너무 좋아!
  ;그 이외
  ELSE
  	PRINTFORMW 주인님이라든지 없어요―
  ENDIF

  예 1은 예 2로 같은 조건이 됩니다.
  예 2에연모루트때의 조건을 덧붙이기 위해서는 IF문을 고쳐 쓰지 않으면 안됩니다만,
  예 1은 기입 체크를 넣는 것만으로 끝납니다.
  또,새로운 조건을 붙이고 싶을 때도대사용소분기 템플릿 따위로부터 소분기마다 코피페 하면 k
  주의점은 소분기 위로부터 조건에 들어맞으면 표시＆돌아오는(RETURN) 하고 있으므로,
  「함락이 끝난 상태」의 아래에 「연모루트의 경우」를 두거나 하면 죽어 분기가 됩니다.


@입우에우치에서 지문을 쓰는 경우
  보통으로 PRINTFORM(또는 PRINTFORML,PRINTFORMW)를 사용해 기술하면,그 캐릭터의 문자색이 되어 버립니다.
  디폴트의 문자색으로 기술하려면 PRINTFORMD(또는 PRINTFORMDL,PRINTFORMDW)를 사용해 주세요.


@랜덤에 표시시키고 싶은 경우 1
  Emuera 전용 바리안트이니까 라고 해 겁먹을 것은 없습니다. eramaker와 같은 구문이 사용 가능합니다.
  다만,변수를 사용하고 싶은 경우(후로부터 표시 결과를 사용하는 경우)는,1문자 변수(A-Z)는 아니고 LOCAL를 사용하도록(듯이)해 주세요.
  LOCAL는 LOCAL:0~LOCAL:999까지 사용할 수 있습니다만,선두의 몇개인가는 템플릿으로 사용하고 있습니다. LOCAL:2등을 사용하면 좋을 것입니다.
  주의로서 LOCAL에 보유 된 변수는 그 함수내에서 밖에 사용 할 수 없습니다. 만약 다른 함수로부터 이용하고 싶은 경우는 CFLAG등을 사용하는 일이 됩니다.
  
  예 1) 변수 없음              예 2) 변수 있어
    IF RAND:3 == 0            LOCAL:2 = RAND:3
        PRINTFORML 표시 1     IF LOCAL:2 == 0
    ELSEIF RAND:2 == 0            PRINTFORML 표시 1
        PRINTFORML 표시 2     ELSEIF LOCAL:2 == 1
    ELSE                          PRINTFORML 표시 2
        PRINTFORML 표시 3     ELSE
    ENDIF                         PRINTFORML 표시 3
                              ENDIF


@조교중 한 번씩 표시시키고 싶은 경우
  ONCE 함수를 사용합니다. 인수는 입지 않게 메모하면서 사용하면 좋을 것입니다.
  
  IF ONCE(1)
  	PRINTFORMW 「가슴 손대어」
  ELSEIF ONCE(2)
  	PRINTFORMW 「또가슴?」
  ELSE
  	PRINTFORMW 「가슴뿐… 벌써 질렸다」
  ENDIF
  
  가슴주무르기에 상기 예문을 넣었을 경우,같은 조교로가슴주무르기 1회째 「가슴 손대어」
  가슴주무르기 2회째 「또가슴?」,가슴주무르기 3회째 「가슴뿐… 벌써 질렸다」라고 표시됩니다
  ONCE 함수는 조교 종료로 리셋트 됩니다.
  
  같은 인수를 복수개소에 사용하는 것으로,조교 개시→가슴주무르기 「가슴 손대어」→
  유두고문 「또가슴?」→유두로터 「가슴뿐… 벌써 질렸다」같은 표시도 할 수 있습니다
  
  또 FIRSTTIME 함수도,같은 인수를 복수개소에서 사용하는 것으로
  「수공애널를 불문하고 처음의 섹스」 「처음으로페니스를 만지작거려졌다」(와)과 같은 분기를 만들 수 있습니다.


@밤낮의 판정을 하고 싶은 경우
  TIME 변수를 참조해 주세요. 0이라면 낮,그렇지 않은 경우는 밤입니다.
  
  예 1) IF를 사용하는 경우          예 2) 3항연산자를 사용하는 경우
    IF TIME == 0                  PRINTFORML \@ TIME == 0? 안녕하세요 # 안녕하세요\@
        PRINTFORML 안녕하세요   ※3항연산자에 대해서는 중급편에 자세한 기술이 있습니다
    ELSE
        PRINTFORML 안녕하세요
    ENDIF


@배열의 캐릭터 라인에 의한 참조
  Emuera에는 CSV에 쓰여진 캐릭터 라인에 의해 배열을 참조하는 기능이 있습니다.
  예를 들어,「Mark.csv」에 「2,굴복각인」라고 하는 행이 있었다고 합니다.
  통상,이것을 참조하는 경우는 MARK:2로 기술합니다만,
  Emuera에서는 MARK:굴복각인 라고 기술하는 일도 가능합니다.


@디버그에 대해
  최저한,Emuera의 설정(해석 탭)으로 이하의 설정을 합시다.
  표시하는 최저 경고 레벨    0:표준이 아닌 문법
  로드시에 인수를 해석하는  항상 실시한다
  또,최신의 Emuera(사가 개조판)로 체크를 실시하는 것을 추천 합니다.



;--□ 중급편 □-----------------------------------------------------------------------------------

@조심해 두고 싶은 포인트
  ·eramaker/Emuera에는,정수형과 캐릭터 라인형 밖에 없습니다.
    (진위치를 취급하는 전용의 형태라든지,실수형은 없다고 말하는 일입니다)
  
  ·IF ~나 SIF ~의 「~」의 부분은 정수형이 들어갑니다.
    0이라면 가짜(조건을 채우지 않는다),0이외라면 진(조건을 채운다)됩니다.
    (즉 IF X != 0이라고 하는 것은 같은 계산을 2번 하고 있는 것에 동일하고,IF X 로 끝난다고 하는 일이 됩니다)
  
  ·소질을 가지고 있을지 어떨지를 판정하는데,IF TALENT:0 == 1과 같이 기술하는 것은 바람직하지 않습니다.
    가지고 있지 않은 상태가 TALENT:0 == 0인 것으로,가지고 있는 상태는 그 반대,즉 TALENT:0!= 0인 것입니다.
    (1이든지 2든지 -3이겠지만,무엇일까 가지고 있는 것에는 틀림없습니다)
    이것과 조금 전의 항목을 맞추면,소질을 가지고 있을지 어떨지를 판정하는데는 IF TALENT:0으로 쓰면 좋다고 말하는 것이 압니다.
    IF TALENT:0 == 1으로 곤란한 것은,나중에 「재생처녀는 TALENT:0에 2를 넣어 구별하자」등으로 결정했을 경우에,올바르고 「처녀」인 것을 판정 할 수 없게 됩니다.
    0이 아닌 숫자와의 비교를 쓸 필요가 있는 것은,그 소질에 상위 소질등이 있어 구별이 필요하게 되는 개소만입니다.
  
  ·TARGET나 ASSI라고 하는 캐릭터 등록 번호의 유효한 값의 범위는 0~CHARANUM-1입니다. TARGET나 ASSI가 부재의 경우는-1이 들어갑니다.
    이 상태로 TALENT:ASSI:0과 같은 참조를 하면 에러가 되므로 주의가 필요합니다.
    ASSI가 존재하고 있을까를 보려면 IF ASSI >= 0과 같이 씁니다. 존재하고 있지 않는 경우를 판정하고 싶으면 IF ASSI < 0입니다.
    라고는 해도,통상 MASTER가 0에 들어가므로,실제의 곳TARGET나 ASSI의 범위는 1~CHARANUM-1으로 생각해도 지장있지 않았다고 생각합니다.
    따라서 IF ASSI >= 0이나 IF ASSI <= 0과 같이 써도 괜찮은 것으로. 이 근처는 기호일지도 모릅니다.
    (뭔가의 박자에 MASTER가 세대 교대 한다 같은 것이 없으면…)
    (라고는 해도,보통은 MASTER가 0대로 되도록(듯이) 세공한다고 생각합니다만)
    후술의 합선 평가에 대해서도 읽혀지는 것을 추천 합니다.
  
  ·나눗셈을 할 때는 나누는 수가 0이 되는 케이스가 없는가 주의합시다. 0에 의한 제산은 에러가 됩니다.
    특히,나누는 수가 계산식이 되어 있는 경우는 요주의입니다.
    (라고는 해도,이것은 움직이면 아는 레벨의 에러입니다만. 올바르게 움직여 있는 것처럼 보여 실은 잘못되어 있다는 것이 제일 성질이 나쁩니다)


@분할 템플릿에 대해
  텐프레 작성시로 분할 템플릿을 선택하면,그후의 관리가 조금 편리하게 됩니다. (개인차는 있습니다만)
  일체형에 특별한 구애됨이 없으면,한 번 시험해 주세요.
  생성된 폴더마다대사 폴더에 넣으면 OK입니다.
  처음은 침착하지 않을지도 모릅니다만,익숙해지면 아마 좋은 점이 전해지는 것은 아닐까.


@대상 한정 템플릿에 대해
  텐프레 작성시에 대특정 캐릭터용 템플릿으로서 작성해,KOJO_K○. ERB의대사 실렉터,
  ;SIF NO:MASTER == ○
  ;	RESULTS = _NO○
  ↑부분의 comment out를 풀어 0에 캐릭터 고유 번호를 넣는다
  주인이 대상 캐릭터의 경우대 특정 캐릭터용 템플릿으로부터대사이 불려
  기입 체크가 없으면 대상비한정 템플릿으로부터 불린다
  
  예를 들면 커맨드대사부분에 대해서는,대상 한정 템플릿이 있어 주인이 대상 캐릭터의 경우
  
  신텐프레로 대상 한정 개별대사이 쓰여져 있을까
  ↓
  신텐프레로 대상 한정 범용 커맨드가 쓰여져 있을까
  ↓
  신텐프레로 대상비한정 개별대사이 쓰여져 있을까
  ↓
  신텐프레로 대상비한정 범용대사이 쓰여져 있을까
  ↓
  대사이 쓰여지지 않으면 지문 표시
  
  그렇다고 하는 순번으로 확인됩니다.
  대상비한정대사에 가필이라고 하는 사용법이 편리한 것으로 생각합니다.


@변수를 사용하는 경우
  1문자 변수(A-Z)는 사용하지 않는 것이 바람직합니다. 1문자 변수는 각처에서 사용되고 있어 데이터를 파괴해 버릴 가능성이 있습니다.
  기본적으로는 LOCAL 변수가 비어 있는 개소(예를 들면 LOCAL:2라든지)를 사용해 주세요.
  다만,LOCAL에 보유 된 변수는 그 함수내에서 밖에 사용 할 수 없습니다.
  만약 다른 함수로부터도 이용하는 것 같은 경우는 인수로서 건네주는지,CFLAG/TFLAG등을 사용하는 것이 바람직합니다.


@조교 대상의 통칭을 설정하는 경우
  MASTERNAME 변수나 NICKNAME 변수를 사용하면,캐릭터별의 관리가 가능합니다. CSTR 변수에서도 가능입니다.
  (시스템측에서 MASTERNAME와 NICKNAME,CSTR:50~는 사용할 예정은 없기 때문에 자유롭게 사용해 주세요)
  SAVESTR 변수는 캐릭터 변수가 아니기 때문에,다른 장소와 충돌하는 위험성이 큽니다.
  
  이하와 같이 사용합니다(주인이 "당신"의 경우)
    MASTERNAME = %CALLNAME:MASTER%
    NICKNAME =오빠
    PRINTFORML 「%MASTERNAME%는%NICKNAME%가 아니고 있고!」
  결과는 이하가 됩니다
    「당신은 오빠가 아니고 있고!」

@조교 대상/조교자/조수 이외의 제삼자의 이름을 인명⇔국명 표시 바꾸기 기능 대응으로 표시하는 함수
  지정한 캐릭터 고유 번호에 대응하는 캐릭터의 이름을 인명⇔국명 표시 바꾸기 기능 대응으로 표시합니다.
  
  PRINTFORML 「%NATION_OR_H(1)%!」
  인명 표시때 = 「페리시아노!」
  국명 표시때 = 「이탈리아!」
  
  PRINTFORML 「%NATION_OR_H(2,1)%」
  인명시때 「로비노·바르가스」


@랜덤에 표시시키고 싶은 경우 2
  Emuera에서는!(논리부정·NOT)(이)가 사용할 수 있기 (위해)때문에,예 1과 같이 기술할 수가 있습니다.
  또,예 2와 같이 SELECTCASE를 사용하는 일도 가능합니다.
  단일의 값에서만 분기 하는 것 같은 개소에는 SELECTCASE,복수의 값으로 분기 하는 개소에는 IF가 적합하다고 생각합니다.
  하지만,대사에서 이용한다면 기본적으로 IF로 쓴 (분)편이,후로부터 조건을 추가 할 수 있으므로 무난할지도 모릅니다. (최종적으로는 적재적소입니다만…)
  
  예 1) IF에 의한 분기          예 2) SELECTCASE에 의한 분기
    IF !RAND:3                SELECTCASE RAND:3
        PRINTFORML 표시 1         CASE 0
    ELSEIF !RAND:2                    PRINTFORML 표시 1
        PRINTFORML 표시 2         CASE 1
    ELSE                              PRINTFORML 표시 2
        PRINTFORML 표시 3         CASEELSE
    ENDIF                             PRINTFORML 표시 3
                              ENDSELECT


@캐릭터 라인의 3항연산자
  캐릭터 라인의 3항연산자를 이용하면,PRINTFORM 문중에서 판정을 실시해 표시 결과를 분기 시킬 수가 있습니다.
  
  구문은 이하와 같습니다.
    \@ <조건식> ? <캐릭터 라인 1> # <캐릭터 라인 2> \@
  조건식이 진정한 경우는 캐릭터 라인 1,가짜의 경우는 캐릭터 라인 2가 됩니다.
  
  이하와 같이 사용합니다.
    PRINTFORML 당신\@ TALENT:MASTER:남자? 사내 아이 # 여자 아이 \@겠지!
  결과는 이하가 됩니다.
        (MASTER가남자의 경우) 당신 사내 아이겠지!
    (MASTER가남자 이외의 경우) 당신 여자 아이겠지!
  
  \@~\@의 부분이 평가되어 캐릭터 라인이 되므로,그 전후에 공백을 들어갈 수 있으면 그대로 표시되어 버립니다.
    (좋지 않은 예:구문) PRINTFORML 당신\@ TALENT:MASTER:남자? 사내 아이 # 여자 아이 \@ 겠지!
                                       ↑여기의 공백이 여분                           ↑여기의 공백이 여분
    (좋지 않은 예:결과) 당신 사내 아이겠지!
                            ↑     ↑이와 같이 공백이 그대로 표시된다


@특수한 문자의 표시
  통상,대사 파일중에 하트 마크 따위를 쓸 수 없습니다.
  하트 마크를 표시하려면 이하와 같이합니다.
  PRINTFORML 후후%UNICODE(0x2661)%
  0x2661가 문자 코드에 해당합니다. 자세하게는 Unicode의 문자 코드표 따위를 참조해 주세요.
  그 중에서 좀 더 좋은 하트 마크 표시용의 구조가 도입될지도 모릅니다.


@비트 연산에 대해
  Emuera에는 비트 연산용의 편리한 명령이 있습니다.
  GETBIT <변수>,<비트 위치>       비트를 취득합니다.
  SETBIT <변수>,<비트 위치>       비트를 설정합니다.
  CLEARBIT <변수>,<비트 위치>     비트를 0으로 합니다.
  INVERTBIT <변수>,<비트 위치>    비트를 반전(0⇔1)합니다.
  덧붙여 GETBIT는 문중 함수판도 있습니다.
  판정할 수 있는 비트 위치는 0~63까지입니다.
  
  IF GETBIT(FLAG:1,0)
  IF FLAG:1 & 1
  위의 2행은 같은 결과가 됩니다


@합선 평가에 대해 1
  Emuera는 eramaker와 달리 합선 평가를 실시합니다.
  합선 평가란,조건식의 도중에 식 전체의 결과가 정해지는 경우,이후의 판정을 자르는 평가의 방법입니다.
  IF TALENT:MASTER:0 || TALENT:MASTER:1
  라고,TALENT:MASTER:0이 진이라면 그 시점에서 식 전체가 진인 것으로,TALENT:MASTER:1의 판정은 하지 않는다고 말하는 일입니다.
  이것이 영향을 주는 것은 이하와 같은 식입니다.
  IF ASSI >= 0 && TALENT:ASSI:0
  이 식은 eramaker라면 ASSI 부재(ASSI가-1)의 경우에 에러가 됩니다. (TALENT:-1:0을 보러 가기 (위해)때문에)
  그러나 Emuera에서는 ASSI >= 0의 단계에서 식 전체를 가짜가 되는 것을 알고 있기 (위해)때문에,TALENT:ASSI:0의 판정을 실시하지 않습니다.
  따라서 Emuera에서는 에러가 되지 않습니다.


@연모·복종함락을 조사하는 함수 1
  식 나카노세키수MASTER_SEARCH2를 사용하면 캐릭터 1의 사모·공포 대상이 캐릭터 2일지 어떨지 판정할 수 있습니다.
  사용예)
  
  ;조교 대상의 사모·공포 대상이 주인이다
  IF MASTER_SEARCH2(TARGET,MASTER)
  
  ;조수의 사모·공포 대상이 조교 대상이다
  IF MASTER_SEARCH2(ASSI,TARGET)
  
  ;페리시아노의 사모·공포 대상이 주인이다
  R = 1
  CALL NO
  IF M && MASTER_SEARCH2(M,MASTER)


@연모·복종함락을 조사하는 함수 2
  식 나카노세키수KANRAKU를 사용하면 캐릭터가 어느 함락 루트나 판정할 수 있습니다.
  반환값이 0=미함락,1=연모루트,2=음란루트,3=복종루트입니다.
  
  사용예)
  ;조교 대상이연모루트로 함락이 끝난 상태
  IF KANRAKU(TARGET) == 1
  
  ;조수가 미함락
  IF !KANRAKU(ASSI)


@WinMerge를 사용해 봅시다
  대사 템플릿은 발전도상인 것으로 갱신됩니다. 갱신 빈도에 대해서는 뭐라고도 말할 수 없습니다만…
  그 갱신분을 써 내기의대사에 적용하려고 생각하면 꽤 큰일이었다거나 합니다. (그래서 무리하게 하지 않아도 괜찮습니다)
  그런 경우,WinMerge를 사용하면 차분의 추출이나 머지가 비교적 편하게 실시할 수 있습니다.
  이하의 3 파일을 WinMerge에 걸치면 대개의 케이스에 대처 할 수 있는 것은 아닐까.
  파일 1:써 내기의대사
  파일 2:출력한 신텐프레
  파일 3:출력한 구텐프레(써라대사의 원파일)
  ※분할 템플릿을 사용하고 있으면 차분 추출이 편할지도 모릅니다
  
  http://www.geocities.co.jp/SiliconValley-SanJose/8165/winmerge.html



;--□ 상급편 □-----------------------------------------------------------------------------------

@루프를 쓰는 경우
  가능하면 REPEAT를 사용하지 않고,LOCAL 변수를 사용해 FOR문이나 WHILE문,DO-LOOP문으로 기술하도록(듯이)해 주세요.
  REPEAT를 사용하면,드물게 호출원의 COUNT 변수를 파괴해 좋지 않는 것이 일어날 가능성이 있습니다.


@랜덤에 표시시키고 싶은 경우 3
  Emuera에서는 PRINTDATA 구문을 이용하는 것으로 RAND를 사용하지 않고 표시를 내 나눌 수도 있습니다.
  다만,복수행에 건너는 대사의 표시에는 그다지 향하지 않는다고 생각합니다. (가능합니다만 행수가 길어집니다)
  지문과 혼합하는 일도 할 수 없습니다. (별개에 PRINTDATAD가 필요)
  또,모든 분기는 등 확률이 됩니다.
  입우에우치에서 유효하게 이용할 수 있는 장면은 매우 한정적이라고 생각합니다만,흥미가 있는 (분)편은 Emuera(사가 개조판)의 갱신 이력을 참조해 봐 주세요.
  어느 쪽인가 하면,랜덤에 대사를 조립하는 것 같은 처리 방향이라고 생각합니다. 허덕이는 소리라든지?
  
  예) PRINTDATA에 의한 분기(PRINTDATAW를 사용)
    PRINTDATAW
        DATAFORM 표시 1
        DATAFORM 표시 2
        DATAFORM 표시 3
    ENDDATA


@서식부 캐릭터 라인 정수
  ""로 묶어진 개소는 캐릭터 라인으로서 다루어집니다만,@""로 묶어진 개소는 서식부 캐릭터 라인으로서 다루어집니다.
  (FORM 캐릭터 라인,이라고 한 (분)편을 알 수 있기 쉬울지도 모릅니다)
  일부의 명령으로 서식부 캐릭터 라인이 잘 전개되지 않는 경우는,이것을 시험해 보면 좋을 것입니다.


@자작 함수를 정의하는 경우
  특히 결정은 없습니다만,분할 템플릿을 사용하고 있는 경우는 KOJO_FUNC_KX1.ERB와 같은 이름으로 별파일에 모으면 좋을 것입니다.
  다만,많은대사으로부터 이용 가능한 함수는 캐릭터 번호에 의하지 않는 별파일로 나누는 편이 좋을 것입니다.
  자신의입우에우치에서 밖에 이용하지 않는 함수에는,이름에 KX1와 같은 캐릭터 번호를 부가하면 충돌이 어느 정도 회피할 수 있습니다.


@합선 평가에 대해 2
  SIF 1 || FIRSTTIME(300)
      PRINTL
  (와)과 같은 구문에서는,1의 단계에서 조건식 전체가 진이라고 확정하기 위해(때문에),FIRSTTIME(300)가 불릴 것은 없습니다.
  이 때문에,미독판정이 갱신되는 일도 없습니다.
  이러한 데이터를 고쳐 쓰는 타입의 문중 함수를 사용하는 경우는 주의가 필요합니다.
  라고 할까 문중 함수로 조심성없게 플래그를 고쳐 쓰면 위험하다고 말하는 일이기도 합니다w


@디버그 모드에 대해
1. Emuera의 디버그 커맨드를 사용한다
  Emuera를 기동해,화면 좌상의 헬프＞설정＞환경 탭의 "디버그 커맨드를 사용한다"에 체크를 넣어 주세요.
  게임중에"@"로 시작되는 캐릭터 라인을 입력하면 디버그 커맨드로서수 붙일 수 있게 됩니다.
  디버그 커맨드는 ERB와 같은 서식에서 지정합니다.
  예를 들면,
  
  @MONEY = 10000
  @PRINTV FLAG:200
  @PRINTFORM %NAME:MASTER%의 CFLAG(1) = {CFLAG:MASTER:1}
  @ADDCHARA 1
  
  (와)과 같이 써 주세요.
  다만 IF나 CALL와 같은 스크립트의 흐름을 바꾸는 명령이나,INPUT나 WAIT와 같이 입력을 요구하는 명령은 사용할 수 없습니다. 
  덧붙여 디버그 커맨드를 사용하면 MASTER의 이름·통칭이 강제적으로 "사기"가 됩니다.
  
2. 덤폴더내 디버그 모드 파일을 사용한다
  폴더내의 DEBUGMENU.ERB를 ERB 폴더에 넣어,SHOP.ERB 등에 디버그 메뉴 호출을 추가해 주세요.
  조교 대상의 의존도,스트레스의 변화 처리,함락계 소질이나 주인의 소질 착탈 처리,사모 대상자 체크,임신확률 변동을 할 수 있습니다.

  erahetaA 사가 개조판에서는 함락과 동시에 함락용 플래그가 들어가게 되어 있습니다.
  그 때문에,1의 디버그 커맨드로 소질만 추가하면 잘 움직이지 않습니다.
  함락후의 디버그를 할 때는 2의 디버그 모드의 함락계 소질 착탈로부터 소질을 붙이도록(듯이)해 주세요.

