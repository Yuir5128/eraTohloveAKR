-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【남만 무역으로 배우는 비트 연산 강좌】
-------------------------------------------------------------------------------

~목차~
1,논리 연산자
2,STAIN 변수
3,비트의 세우는 방법,재우는 방법
4,비트 연산을 사용한 이벤트에 대해
5,마지막에

6,후쓰기
7,보강


안내역 소개＞

혼다씨… 왜일까 era에 정통하고 있는 할아버지입니다
안토뇨씨… 왜일까입덧쓰기에 눈을 뜬 것 같은 두목입니다

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【논리 연산자】
-------------------------------------------------------------------------------


『혼다,조금 (들)물어도 괜찮아?』
「이런 안토뇨씨. 수로부터 봉에 도대체 무슨 일입니까?」
『아니,대사의 손책은대사 해 프랜시스가 말취했기 때문에,
　조금 페리쨩의대사 들여다 본 나지만……』


IF CFLAG:208 & 1
	PRINTFORML 「짠. 전에 받은 놈 입어 보았어. 부끄럽지만 어울리고 있을까나」


『라는 기술이 있었다. 이 IF조건식,&이 한 개 밖에 없어 응. &&의 실수우노?』
「아아…… 이것은 논리 연산자예요」
『론리엔잔시? 로리콘 동료?』
「…… 진심으로 그렇게 말씀하시고 있다면 나는 설명 책임을 방폐[放棄] 하도록 해 받습니다」
『거짓말 해 거짓말!에스파냐죠크!!패거리 가르쳐도 예 예 예!!』
「그렇게 말해져서는 방법 없네요. 설명 합시다.
　우선,비트 연산이라고 하는 말에 귀동냥은 있습니까?」
『비트 연산은…… 거칠어 지고? 로비대사에서 사용되고 취하는 것 같은 의미 불명의 신기술.
　저것의 탓으로 단번에 그대사의 해독 난이도가 뛰고 위가 와 군요. 나에게는 전혀나』
「별로 신기술은 아니에요. 초대 erakanon 시대부터 존재한 기술입니다」
『에─그런 응? 그래서,그 비트 연산이 어떻게든 했는지?』
「네. 논리 연산자는,비트 연산을 실시할 때에 이용되는 계산식이랍니다」
『응……?』
「이 계산식에서 사용되는 기호는|과&.
　대사이나 패치 제작을 하고 있는 (분)편이라면,어느쪽이나 본 기억은 있군요」
『||은 「어느 쪽인지를 채운다」,&&은 「양쪽 모두를 채운다」조건식 했군』
「에에. 그것은 논리 연산자라도 같은 것입니다. 조금 예를 들어 볼까요」

 4 &  4 == 4
 7 &  7 == 7
 8 &  2 == 0
16 &  4 == 0

『&은 같은 숫자 하면 같아,다른 숫자나라고 0이 되는 응?』
「그럼,다음에 이쪽을 봐 주세요」

 2 |  2 == 2
 4 |  4 == 4
 7 |  2 == 7
 4 |  5 == 5

『같은 숫자 하면 같은 것을 돌려주고 있지만,다를 때는 큰 (분)편을 돌려주고 있구나』
「그럼,다시&의 경우를 부탁합니다」

 6 &  2 == 2
 4 & 13 == 4

『응? …… 엣또,다른 숫자나의에 숫자가 작은 (분)편을 돌려주고 있어?』
「계속되어서 또다시&입니다」

 9 & 17 == 1
21 &  7 == 5

『…… 헤?』
「그러면 최후에 또 하나,|의 경우를 봅시다」

21 |  7 == 23
11 | 28 == 31


『조,조금 기다렸다아!전혀 의미 알지 않아로!?』
「그런데도,이것은 최초로 말한 대로이랍니다.
　|라면 어느 쪽인지를 채운 결과,&라면 양쪽 모두를 채운 결과를 돌려주고 있습니다」
『하아? 21으로 7의 어느 쪽인지를 채웠을 때,그리고 어째서 23이 되는군!』
「왜냐하면,이 계산식은 모두 이진수로 행해지고 있기 때문입니다」
『…… 하?』
「그렇네요…… 여기에서 앞은 긴 설명이 되고,우선은 잠시 쉴까요」
『아아,부탁해요. 머리 헷갈려 왔다……』
「후후…… 그럼,나는 차라도 볶을 수 있어 오네요」
『크게. 나의 몫은 설탕대성으로 부탁해요―』
「…… 노,녹차에?」


＜느긋하게한다＞



『후우. 슬슬 침착해 왔고,조금 전의 이야기의 계속라고 양손도 좋을까?』
「논리 연산자에서는 이진수로 계산을 실시하고 있는…… 여기까지는 설명했어요.
　그러면,조금 전의 계산식을 몇개인가 픽업 해 이진수로 고쳐 볼까요.
　우선은&의 경우로부터」


  4 &   4 ==   4
100 & 100 == 100

   8 &    2 ==    0
1000 & 0010 == 0000

   4 &   13 ==    4
0100 & 1101 == 0100

   21 &     7 ==     5
10101 & 00111 == 00101

「&의 움직임은&&과 같음. 양쪽 모두를 채웠을 때에 만여라 1을 돌려줍니다」
『…… 응─,라고. 1을 남길 수 있는의 것은,오른쪽의 숫자와 왼쪽의 숫자가 양쪽 모두 1때만이네』
「그런 일이군요. 0으로 1,1으로 0,0으로 0은 모두 제로가 됩니다. 그럼,이번은|의 경우」


  4 |   4 ==   4
100 | 100 == 100

  7 |   2 ==   7
111 | 010 == 111

   21 |     7 ==    23
10101 | 00111 == 10111

   11 |    28 ==    31
01011 | 11100 == 11111

『이번은,어느 쪽인가에 1이 있으면 1이 그대로 남아 있구나』
「|은 『어느 쪽인지를 채우고 있다』라고 하는 기호이기 때문에. 0으로 0이외 절대로 1입니다.
　2개의 법칙을 정리하면 이런 기분이 듭니다」

「OR(기호·|)」
2개의 수치중어느 쪽인지가 1이었던 경우는 1,양쪽 모두 0이었던 경우는 0으로 한다.
1 | 1 = 1
1 | 0 = 1
0 | 1 = 1
0 | 0 = 0

「AND(기호·&)」
2개의 수치중양쪽 모두가 1이었던 경우는 1,다른 한쪽에서도 0이었던 경우는 0으로 한다.
1 & 1 = 1
1 & 0 = 0
0 & 1 = 0
0 & 0 = 0

「이것으로,의미 불명한 계산식의 수수께끼는 풀 수 있었어요.
　모르는 (분)편은,이런 식으로 필산해 보면 뭔가를 잡을 수 있을지도 모릅니다」

    4   110        21  10101
 & 13  1101      |  7  00111
-----------     ------------
    4  0100        23  10111


『여기까지는 알았지만…… 이런 응하나 하나 하고 있으면 지치고 거치지 않는?
　21이라든지라면 아직 예 하자하지만,로비대사에는 16384라든지 바보 같은 숫자가 출 잡았다로?』
「이진수광이 되고 있는 로비노군대사품자 라면 몰라도,
　보통은 하나 하나 세고 있으면 발광하네요. 함수 계산기로도 사용해 주세요」
『함수…… 계산기? 열리지 않아,또 미지의 툴이……』
「아니오,모든 프로그램→악세사리→계산기로 갈 수 있는 보통 계산기예요.
　이 계산기에는 10 진수를 2 진수로 고쳐 주는 기능이 붙어 있습니다.
　기계가 빠르고 정확하므로 부디 그 쪽을 이용하십시오」
『그렇다면 안심이구나. 그래서,또 설명해 받아도 괜찮을까』
「자」
『이 논리 연산자가,어째서 비트 연산에 연결되는 응?』
「우선,&을 사용하면 그 숫자를 이진수로 고쳤을 때에 몇 자리수째가 1인지를 조사할 수가 있습니다.
　여기까지는 이해해 받을 수 있었습니까?」
『그것은 아무튼. 예를 들면 3자리수째가 1인가 어떤가를 조사하고 싶은다면,
　IF A & 4라고 (들)물으면 인연(테)나』
「그 대로입니다. 그리고,지금까지 설명하고 있지 않았습니다만――
　이 계산식에서는,『몇 자리수째』인지를 『몇 비트째』라고 부릅니다」
『응? 즉,비트 연산이라고 하는 것은……』
「논리 연산자를 고용해,각 비트가 1인가 0인지를 조사하기 위한 식. 라는 것이 되네요」
『에─그런 응!겨우 비트 연산의 구조가 알았다로!아니―,여기까지 장이나……』
「이런. 아직도 끝나지 않아요?」
『에』
「여기서 끝나면 IF조건식 밖에 쓸 수 없지 않습니까.
　당신,CFLAG:200의 15비트째를 세워 12비트째를 재워 주세요라고 말해졌을 때에
　어떻게 하면 좋은가 이해하고 있습니까?」
『그 앞에,비트를 세운다 라는 뭐?』
「이봐요,역시 그 정도지요. 아직도 해설은 계속되어요,꼿꼿하게 해 주세요」
『에─…… 나 이제 돌아가고 싶어요……』



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【STAIN 변수】
-------------------------------------------------------------------------------

「그러면 우선,바로 방금전 말한 비트가 선다,및 자는 것 의미에 대해.
　비트 연산은 이진수로 진행되어 가기 때문에,당연히 각 비트의 숫자는 0인가 1인가 밖에 없습니다」
『키이네』
「2개 밖에 없는――역을 말하면,스윗치의 ON·OFF와 같이 숫자를 취급할 수 있다」
『오?』
「예를 들면 5. 5는 이진수로 나타내면 101입니다. 이것은 스윗치 1으로 3이 ON로,2가 OFF라고 생각하면 된다.
　이 스윗치가 ON가 되어 있는 상태를,『비트가 서 있다』라고 부릅니다」
『그러면,0――스윗치가 OFF응시는』
「네. 이것은 2비트째가 자고 있다,혹은 떨어지고 있다고 부릅니다.
　――아,이 스윗치도 물어 비트수는 오른쪽으로부터 차례로 세어 주세요.
　왼쪽으로부터 세면 유감인 숫자가 되어요」
『하아─,잘 성과와 인…… 에서도 이것,무슨 도움이 되는 응?』
「이것은 초대 erakanon 시대부터 존재하는 전통 기술이니까요,우리의 가까운 곳에 눕고 있습니다.
　예를 들면 STAIN 변수」
『STAIN…… 는,더러움이네. 뭐 나에게는 너무 관계없지만』
「전국의 주인과 조수의 동경 소질·더러움무시소유니까요…….
　이것 참,이 STAIN 변수입니다만,실은 비트 연산을 사용해 판정되고 있습니다」
『에에에? 그런 응금시초문나지만』
「공식의 erabasic 구문 해설의 맨 밑에 몰래 실려 있습니다만 말이죠.
　우선은,자료 폴더에 내봉 되고 있는 erahetaA의 STAIN 변수 해설을 읽어 볼까요」


더러운 일람
STAIN:0 = 입
STAIN:1 = 손
STAIN:2 = 페니스
STAIN:3 = 바기나
STAIN:4 = 애널
STAIN:5 = 가슴
STAIN:6 = 질내

1 =애액
2 = 페니스
4 =정액
8 = 애널
16= 모유
32=점액
64=파과[破瓜]의 피


「…… 과 이런 느낌으로 무릎. 덧붙여서 숨겨 파라미터로서 STAIN:7으로발의 더러움을 판정할 수 있습니다」
『풋잡페티시즘의 어딘가의 누군가가 승손조림 더한 녀석이네』
「발의 더러움은신발를 벗거나 신거나 하면 리셋트 되어요――와 아무튼 여담은 놓아두어.
　이 애액 더러운 따위에 할당되어지고 있는 숫자를,조금 함수 계산기로 이진수로 고쳐 봐 주세요」
『헤? 아무튼 예지만…… 엣또,32는――』


애액  =   1 =          1
페니스=   2 =         10
정액  =   4 =        100
애널=   8 =       1000
모유  =  16 =      10000
파과[破瓜]피=  32 =     100000
점액  =  64 =    1000000
오줌    = 128 =   10000000
물    = 256 =  100000000
변    = 512 = 1000000000


『――어? 이것,예쁘게 1 비트씩 어긋나고 취해?』
「에에. STAIN 변수는 각 더러움을 이진수의 자리수 마다 관리하고 있습니다.
　비트 연산이 스윗치와 같은 것이다,라고 하는 일은 조금 전 설명했어요?
　그러면 여기서 문제입니다. STAIN:7 == 6때를 뒤따르고 있는 더러움은 무엇일까요」
『6은 이진수로 110이나로부터……2,3비트째가 온으로,1이 오프. 라는 것은…… 페니스와 정액의 더러움이네』
「명답입니다. 여기서 조금 전 가르친,몇 자리수째가 1이 되어 있을까――
　다시 말해,몇 비트째가 서 있을까를 요구하는 조건식을 사용해 볼까요.
　입에 정액의 더러움이 붙어 있는지 어떤지,판정해 봐 주세요」
『맡김 때!정액 더러움은 4나로부터……』

IF STAIN:0 & 4
	PRINT 정액 무심코 취해!
ELSE
	PRINT 정액 붙않았어!
ENDIF

『이런 느낌으로 판정할 수 있는 것이네!』
「네. 또,예쁘게 1 비트씩 어긋나고 있으므로 복합의 더러움을 판정하는데도 편리합니다」
『STAIN:6 & 37이라든지 로망 흘러넘치는 더러움도 단번에 판정할 수 있고』
「…… 에─,그 의혹의 판정에 관해서는 노 코멘트로 가고 싶다고 생각합니다.
　여기서 안토뇨씨가 무슨 더러움을 판정했는지는 여러분에게로의 숙제라고 하는 일로」
『조금 전부터 심하게 페티시즘 냄새나는 더러운 판정시켜 두어 이제 와서 무엇 순정인 체하며 군요 너……』



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【비트의 세우는 방법,재우는 방법】
-------------------------------------------------------------------------------

「여기까지는,게임중에 승손에 서거나 자거나 하는 비트의 판정에 대해 설명해 왔습니다.
　그런데,이 근처에서 1개 EVENT_K2_ALL.ERB를 열어 봐 주세요.
　최초로 당신으로부터 이야기를 들었을 때는 의미 불명하구나 해독 난이도가 튀고 있는이라든가라고 말하고 있었습니다만,
　이 강좌를 읽는 전보다,무엇이 일어나고 있을까 알기 쉬워진 것처럼 생각하지 않습니까?」
『――진짜나. CFLAG 사용표,지금까지는 무슨 암호나라고 생각하고 있었지만…… 지금이라면 알아요.
　이것,STAIN 변수같이 여러가지 플래그를 하나의 변수로 관리해 취하는 이네?』
「네. 이대사에서는 보통으로 하고 있으면 CFLAG를 곧 고갈시켜 버릴 것이라고 생각했으므로,
　정리하는 한 플래그는 모두 비트 연산으로 처리하고 있던 것이에요」
『과연―. 확실히 이것은 없어요. 비트 연산 없음 주면,플래그가 몇개 있어도발등응으로』
「그렇겠지요? 비트 연산을 사용하면,이만큼 많은 정보도 1개의 CFLAG로 관리할 수 있습니다.
　그러면 드디어,자신들의손로 비트를 세우거나 재우거나 해 볼까요」
『또 뭔가 이상한 계산식이라든지가 나오는 응? 나,IF-ENDIF만으로 가득 가득이나로?』
「IF-ENDIF만으로 충분해요. 전부발 해 산으로 할 수 있을테니까」
『에? 그런 응?』
「네. 예를 들면 2비트째를 세우고 싶으면……」

SIF (A & 2) == 0
	A += 2

「이것으로 섭니다. 2비트째가 서 있는데 게다가 2를발 해 버리면 비트가 어긋나 버리므로,
　먼저 2비트째가 서 있을까 서 있지 않은지 어떤지를 조사해 두는 것이 미소군요」
『,최초의 페리쨩대사때도 생각한 나하지만,무엇으로 외모로 쿠쿡 응의?
　A & 2 == 0 자나 의?』
「그것이 안됩니다. 안토뇨씨,35 + 4 % 2는 어떻게 계산합니까?」
『그런 응 결정취하는. 우선은 나눗셈으로부터 패거리,4 % 2를 먼저 계산해――아』
「…… 네. 이 식,사양으로 2 == 0을 먼저 계산해 버리기 때문에,어떻게발 긁어도 분기 하지 않게 됩니다」
『과연. 그러면,외모로 구구법응의 것은 잊지 않게 천도인. 그래서,이제(벌써) 1개 질문』
「네,그러세요」
『이 구문,페리쨩대사에서도 로비대사에서도 본 것 없어.
　이외에 간단한 비트의 세우는 방법 우노?』
「…… 이런 때에는 날카롭네요. 네,있고 말고요.
　제일 최초로 이 강좌로 설명한,논리 연산자|는 기억하고 있습니까?」
『잊을 이유 없어 응? 어느 쪽인지를 채우면 1을 돌려주기 때문에,0으로 0이외라면 절대로 1에…… 아!?』
「에에. 짐작대로입니다. 이 기호·|을 이용하면 비트를 세울 정도로 낙승이예요.
　변수끼리의발 해 산을 A += B 라고 기술하는 것은 알고 있군요? 그 원리로――」

A |= 2

「라고 쓰면,간단하게 비트를 세울 수가 있습니다」
『여하튼 절대로 1이 되는 나 것인. 이것으로 세우는 (분)편은 확실히나』
「네…… 로,문제가 비트 선명한 응이군요」
『어떤 문제가 있는 응?』
「eramaker로 사용할 수 있는 논리 연산자가&인가|밖에 없는 것입니다. 보통 비트 연산에서는」

A & ~B

「라고 하는 식으로 기술하면,B비트째를 떨어뜨려 줍니다만……」
『~는,&그렇지만|도 아닌 -(일)것은 사용할 수 있는 거치지 않는』
「그렇네요. 그렇다고 하는 것으로,이쪽은 Emuera용으로 됩니다」
『그러면 단역 없는 하는 거야? 서면 계속 선채?』
「아니오,조금 까다로운 것뿐입니다. 우선은,최초로 비트를 세우는 방법으로 사용한 기술의 응용」

SIF A & 2
	A -= 2

「이것이라면 2비트째가 서 있는 때만 2비트째를 떨어뜨릴 수가 있습니다」
『과연…… 에서도 이것,로비대사에서 본 적 없어요. 역시 편한 방법 있는 와 다른 거야?』
「락…… 일까요」
『응?』
「보여 받으면 알아요. 로비노대사의 지정 비트 클리어 작업은,이런 식으로 되어 있습니다」

A &=최대 사용 비트(10 진수) - 떨어뜨리고 싶은 비트(10 진수)

『…… 하? 무엇이나 남아라』
「이런 식으로도 쓸 수 있습니다,는 정도로 기억해 두어 주세요.
　계산 잘못하면 버그를 일으키기 때문에 추천은 하지 않습니다.
　대사주는 『1행으로 쓸 수 있기 때문에』는만으로 이렇게 쓰고 있을 뿐이고」
『일단,무엇이 일어나는 인가만 설명해 주지 않는?』
「그렇네요…… 예를 들면,로비노대사에서는 지금 단계 최대 16 비트――131071을 상정하고 있습니다.
　여기로부터 10비트째,1024를 재우고 싶을 때는,131071 - 1024 = 130047. 이것을&로 판정하면……」


  11111110111111111
 &    XXXXXXXXXXXXX
-------------------

「이렇게 하면,&판정의 사양으로 비유 10비트째가 1이든지 0이든지 절대로 0이 됩니다.
　다른 비트는 1이라면 1끼리로 1은 남아,0이라면 1으로 0의 편성이 되기 때문에 0인 채 남는다.
　즉,지정한 비트다 떨어뜨려 뒤는 남길 수가 있습니다」
『…… 열리지 않아,전혀 모르는 구 되어 왔어요』
「여기까지 오면 배우는 것보다 익숙해져라예요.
　비트 연산은 강좌만 읽어 이해할 수 있는 것 같은 간단한 것이 아닙니다.
　이 강좌를 여기까지 읽은 당신이라면 이해할 수 있을 것입니다.
　자,비트 연산을 실제로 사용하고 있는 파일이나대사을 해독해 봅시다!」


「아,말하는 것을 잊고 있었습니다. 전부의 비트를 단번에 떨어뜨리고 싶으면,A = 0에서도 상관하지 않아요」
『매회 매회 리셋트 하는 것 같은 플래그는 그러면 예응이네?』
「뒤는…… 식물에 물을 올린다든가,애완동물에게 먹이를 준다든가.
　일자가 바뀔 때 마다 또 0으로 하고 싶은 플래그 따위는,그렇게 처리하면 좋은 것이 아닐까요」



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【비트 연산을 사용한 이벤트에 대해】
-------------------------------------------------------------------------------

『그래서,이 비트 연산이지만――구체적으로 어떻게 사용하면 좋은 것 응?』
「그렇네요. 이 강좌 쓰고 있는 사람이 모든 erahetaA대사 직공씨에게
　부디 실장해 받고 싶은 곳이 하나 있습니다」
『잘난듯 하게. 무엇이나의,말해 보고 아니』
「고문대사」
『하?』
「고문대사에서,이상경험가 들어가는 패턴을 설정해 있는 (분)편이 있을까요?
　저기에서 부디 이 비트 연산을 이용 해 받고 싶습니다.
　그런데,지금 이 장소에서 적당한대사 파일 확인해 받을 수 있으면 압니다만,
　상당한 (분)편이 『기절 할 때까지 때리는 것은 이상』이라고 하는 이유로써 무의식의 비트 연산을 하고 있습니다.
　그렇지만 보면 아는 대로,실제로 CFLAG:12의 2비트째를 세우고 있는 (분)편은 한사람도 없습니다.
　그렇다고 하는 것으로,현재 상태로서는 보았더니 보았을 뿐 몇회에서도이상경험가 들어가 있습니다.
　대사주의 로비노군이 그것만으로 여러분의이상경험를 5~10회정도로 했으므로 조사는 완벽합니다」
『조금 기다려 아니,나의 부하에게 무엇 시키고와 의!?』
「그건 그렇고 이 CFLAG:12입니다만,erahetaA에서는 노역중 플래그로서 사용중입니다.
　노역중은 당연히 조교를 실시할 수 없으므로,보통으로 하고 있으면 이 비트 연산은 정상적으로 동작하지 않습니다」
『에에에에에!?』
「그래서,그 부분을――」

;(플레이 내용)는이상경험인 것으로 점을 넣는다
IF (적당한 빈플래그 & 비어있는 비트) == 0
	PRINTFORML %EXPNAME:50%＋1
	EXP:50 += 1
	적당한 빈플래그 |=비어있는 비트
ENDIF

「로 하지 않으면,의미 없어요」
『…… 무엇으로 지금까지 아무도 눈치채지 못했다』
「그 만큼 비트 연산의 드나들기가 거북했다라는 일이 아닐까요.
　지금까지의 설명만으로 이 근처는 간단하게 개조할 수 있을 것이기 때문에,우선은 여기로부터 도전해 봐 주세요」

「――그렇게 자주,이상경험를 넣는 이벤트가 많이 있다고 하는 (분)편 따위는,
　이벤트에 응해 비트의 위치를 비켜 놓아 주세요.
　그렇지 않으면 A플레이로이상경험가 들어간후에 B플레이를 했을 때,
　같은 비트 위치에서 판정을 하고 있으면 의도한 거동을 해 주지 않습니다.
　이 근처의 거동에 관해서는 STAIN 변수를 생각해 내 받을 수 있으면 좋은 것이 아닐까」
『아─,비트 연산은 언제 일어날까 모르는 이벤트의 제어도 할 수 있는 이네』
「네. 단순한 스윗치의 온 오프 뿐이 아니고,
　조교 100회째 기념이라든지…… 그렇게 말한 『언제 올까 모르는 플래그』의 판정에도 향하고 있네요」
『자칫 잘못하면친애 붙기 전에 100회통일지도 모르고』
「로비노군대사의 CFLAG 사용표를 해독할 수 있으면,비트 연산으로 할 수 있는 일의 대부분은 이해할 수 있습니다.
　노력해 읽어 풀어 주세요. 콘피그적인 사용법으로부터 이벤트까지,여러가지 하고 있을테니까」



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【마지막에】
-------------------------------------------------------------------------------

IF CFLAG:208 & 1
	PRINTFORML 「짠. 전에 받은 놈 입어 보았어. 부끄럽지만 어울리고 있을까나」

「이것,이제(벌써) 읽을 수 있군요」
『CFLAG:208의 1비트째가 서 있으면,페리쨩가선물 한 옷을 입어 주는 이네.
　그래서,중요한 CFLAG:208은선물커맨드로 비트를 세우게 되어 있다』
「그래그래,완벽하지 않습니까!」
『그러나…… 뭔가 굉장한 머리의 아픈 강좌 했어요』
「뭐…… 사용하면 재미있어진다고 하는 기술도 아니기 때문에,무리해 기억하지 않아도 좋아요.
　최저한 STAIN 변수의 사용법마저 알게 되었다면 만만세가 아닐까요」
『그런 것이나의?』
「그런 것입니다. 신기능도 미니 게임도,만들었기 때문에 반드시 재미있다는 것이 아닐 것입니다?
　특히 미니 게임은 만드는 측에서 하면 전혀 미니가 아닙니다」
『그것은 그런 응이나지만……』
「사용하면 편리하게 되는 것은 확실합니다. 뭐,지금까지의 이야기는 귀라도 사이에 두어 주세요.
　(STAIN:7:4) != 0으로발에 정액 더러움이 있을지 어떨지를 확인된다.
　이 기능조차 기억해 두면 확실히예요」
『전혀 괜찮은 생각이 들지 않는 것 화상』
「모르는 것이 있으면 또 (들)물어 주세요. 대답할 수 있는 한이라면 대답할테니까――
　그렇다고 하는 것으로,이번 강좌는 여기서 연회의 끝으로 할까요」
『키이네. 책은,수고 하셨습니다!』







-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【후쓰기】
-------------------------------------------------------------------------------

굉장히 알기 힘든 강좌가 되어 버려 죄송합니다.
그렇지만,이것이 내가 할 수 있는 힘껏이었습니다.


■참고로 한 강좌
·도 개 비치는 강좌
·연고응과라고 이 비트 연산 강좌

양쪽 모두 eratoho 통계 wiki,개발용 툴 페이지로 다운로드할 수 있는 비트 연산 강좌입니다.
이 강좌보다 수배 알기 쉽다고 생각되기 때문에,부디 봐 주세요.

·eratoho 통계 Wiki  ERB 구문 강좌 특별편
·era 본가 「막들트,막」 eramaker era basic 변수 리스트(잠정판) 

여기 보지 않으면 아마 의미 불명.


■이 파일내에서 화제에 내도록 해 받은대사
페리시아노입카미나카심에,거의 모든 erahetaA대사

무단 재료 방편으로 죄송합니다.
언제나 신세를 지고 있습니다,정말로 감사했습니다.



-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
【보강】
-------------------------------------------------------------------------------


『뭔가 말하는 것을 잊고가 있던 해?』
「네. 3개 정도…… 우선,A & 3 == (A & 1 || A & 2)가 되는 일의 설명을 잊고 있었습니다」
『식만이나와 의미 불명이네』
「증명은 각개인에 맡깁니다. 우선 원리로부터 말하면……
　A & 3이 0이 되는 것은 A가 어떤 때였던가요
『1,2비트째의 양쪽 모두가 떨어지고 취할 때…… 아아,어느 쪽인가가 서 있으면 0에는이라면 이상하구나』
「그렇다고 하는 것으로,A & 3 == (A & 1 || A & 2)가 됩니다. 조심해 주세요.
　그래그래,이제 와서입니다만……」

IF TALENT:A

「등의==를 사용하지 않는 조건식은 『 0이외이다』의 뜻인 것으로,1일거라고 2일거라고-1일거라고 반응합니다」
『의외로 모르는 사람이 있기 때문에 일단,. 뒤는 무슨이야기?』
「엣또…… 비트를 떨어뜨릴 때의
　『A &=최대 사용 비트(10 진수) - 떨어뜨리고 싶은 비트(10 진수)』
　그렇다고 하는 설명이 소중한 곳이나 너무 날리고 있어,정확한 의미가 전해지지 않았기 때문에 보발를 이라고」
『라고 할까,여기는 하나로부터 계산식이 틀림은?』
「마음껏 달랐습니다. 11/21이후부터는 수정 들어가 있습니다.
　보강이므로 자세하게 보강하도록 해 받으면,저것은 사용하고 있는 비트의 최대수 - 떨어뜨리고 싶은 비트입니다」
『예를 들면 최대 사용 비트가 12 비트――4096이라면,비트의 최대수는 1 + 2 + 4 + ~중략~ + 4096으로 8191이네』
「네,라고 하는 것으로 틀림없게 부탁 드리겠습니다. 몇인가 예를 들면――」


·최대 사용 비트는 16비트째(65536)로 가정한다 =비트의 최대치는 131071

FLAG:1의 10비트째(1024)를 0으로 한다
FLAG:1 &= 130047( = 131071 - 1024)

FLAG:1의 0~5비트째(1+2+4+8+16+32)를 모두 0으로 한다
FLAG:1 &= 131008( = 131071 - 63)


「그렇다고 하는 것 같은 형태가 되네요」
『비트의 최대수는 간단하게 요구되는 방법 어머나 거치지 않아의 ? 하나 하나발의 귀찮은 응이나지만……』
「최대 사용 비트 * 2 - 1으로 부디. 그리고,이 방법이라면 『현재의 최대 사용 비트』로 계산하므로,
　그후의 확장 어떻게에서는 버그를 일으키는두려움가 있는데도 주의해 주세요」
『지금은 4096까지 밖에 사와들 응에서도,언제 8192에손 낼까 모르는 것이군요』
「네. 실제로 로비노군대사,빠듯빠듯해 이제 곧 전서나무 수선이 될 것 같습니다.
　비트 연산 하고 있는 플래그가 2개 정도 있습니다만,양쪽 모두 앞으로 2 비트씩 밖에 여유 없습니다」
『합계 32 비트 이미 혹사했군 있고……』

「최후에,비트 연산을 사용하는 경우는 반드시 사용법을 readme나 파일내에 써두어 주세요.
　비트 연산은 그렇지 않아도 복잡한 플래그 관리를 보다 한층 스파게티인 것으로 바꿉니다.
　후로부터 본입카미카붓 및 패치 제작자에게도 알도록(듯이),하나 하나 정리해 주세요」
『분명하게 메목이라든지 와 자신도 혼란소인』
「그런 일이군요. 그러면,여러분 즐거운 비트 연산 라이프를 전송 주십시오」

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
