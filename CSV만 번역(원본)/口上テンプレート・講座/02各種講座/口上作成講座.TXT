【입上作成講座】
eratohoAおよびeratohoAをベースにしたバリアントにおける입上作成についての講座です。

【目次】
１．基本的なこと
２．입上テンプレートの使い方
３．입上テンプレートの改造
４．입上テンプレートの構造
５．デバックについて


【１．基本的なこと】

　입上について、以下の項は把握しておいてください。

　・입上の批評について
　부정のまかり通る風土だと創作を萎縮しかねないので、입上の批評などは言葉を選んで行うこと

　・입上内のキャライメージについて
　エロや恋愛の無い作品のキャラは性についての反応は様々なので、キャライメージに合って無くても気にしないほうがよい

　・입上を書いたときの注意事項
　입上を書いた場合、입上もeramakerと同様にオープンソースなので加筆の可否はreadmeなどで意思表示をする必要があります。
　表示しなければ基本的に可と見なされますので、注意してください。

　・입上の加筆をした場合の注意事項
　使わせて頂いた입上の明記をしておく
　加筆、改変させて頂いた部位の明記をしておく
　別人による加筆、改変であることの明記しておく
　元の作者への感謝の言葉を添えておく


【２．입上テンプレートの使い方】

　입上テンプレートとは、eramakerにおいて、調教しているキャラクターのセリフや描写を加える関数郡をまとめたファイルです。まず始めにテンプレート内のX1及びX2をキャラ番号に置換（キャラ番号が一桁の場合、X2は01、07のように0を含めた二桁にする）してください。ほとんどのテキストエディタならCtrl+Rで置換メニューがでます。テンプレート内の条件を見ながらPRINTFORMWの후にセリフなどを加えてファイルをERBフォルダに入れれば、条件に応じてキャラクターの입上が表示されます。
　입上を書く際には、テキストエディタを用意しましょう。『サクラエディタ』と、『サクラエディタ用キーワード・単語・辞書ファイル』を用いることで、入力途中にCtrl+スペースで単語の候補を出す機能、単語を選択すると単語の説明が見れる機能、正しい単語の色は変わる機能を覚えておくなどの便利な機能が使えるため、最初はこれを導入することをお勧めします。特に構文をいじる気が無くても、導入しておいて損をすることはないでしょう。
　上記二つ、及び他の便利なツールはこちらのURLページにまとめてあるので、参照してみてください。（http://www7.atwiki.jp/eratoho/pages/103.html）


　・テキスト関数について
　テキスト関数とは、従来にあった描写テキストをEVENT_M.ERBにまとめて、独立した関数としたものです。情景テキストがONで입上がOFFだったり입上ファイルが無い場合にはテキスト関数の内容が表示されます。
　例えば、調教コマンドにおいては、CALL TRAIN_MESSAGEで情景テキストを表示させて、表示されるテキストはEVENT_M.ERBの@MESSAGE_COMX(Xはコマンド番号)を参照することで内容を把握することができます。입上は基本的に情景テキストと同時に表示されるため、EVENT_M.ERBを参照しながら書いていくとよいでしょう。他にも、コマンド実行후の変化におけるテキスト関数や刻印取得時のテキスト関数、調教外イベント時のテキスト関数があります。
　また、これらのテキスト関数は입上機能を使う場合においては입上ファイルから呼び出します。テキスト関数の前に입上テキストを持ってくることで、描写テキストの前に입上を書くことができます。さらに、テキスト関数を消すことで、描写テキストを変更することも可能になっています。

IF SELECTCOM == 0
	CALL TRAIN_MESSAGE
	;연모、친애
	IF TALENT:3 || TALENT:6
		PRINTFORMW 
	ELSE
		PRINTFORMW 
	ENDIF
ENDIF

　例えばこのような構文において、연모か친애の時に情景テキストを変更する場合には以下のようにしてください。

IF SELECTCOM == 0
	;연모、친애
	IF TALENT:3 || TALENT:6
		PRINTFORMW （変更した情景テキストの内容）
		PRINTFORMW 
	ELSE
		CALL TRAIN_MESSAGE
		PRINTFORMW 
	ENDIF
ENDIF


　・エキストラ構文について
　エキストラ構文とは、初回調教開始時に選択肢を表示することができる構文です。これは、입上を書いたキャラのイメージとCSVによるキャライメージとの差異を埋めるための素質、能力変更が基本的な使い方ですが、입上内でパラメータを変動させたり独自のイベントを組み込むなどのゲームバランスに影響を及ぼす機能の使用の有無を問うためにも使用します。
　基本的に입上機能はセリフを表示するためのものなので、입上内で経験や珠が加算されたり素質が追加されるのは、使用の有無を問えるようにしておくようにしましょう。

;--------------------------------------------------
;エキストラモード構文　CFLAG:220を使用
;はいを選択した時に初調教時に입上設定用の素質に変更できます
;下記に처녀化する場合の構文をサンプルとして載せておきます
;-------------------------------------------------
;IF CFLAG:220 == 0
;	PRINTL 처녀モードに移行しますか？
;	PRINTL [0] はい
;	PRINTL [1] いいえ
;	$INPUT_LOOP
;	INPUT
;	IF RESULT == 0
;		PRINTFORMW ―처녀モードに素質、能力を変更します―
;		TALENT:TARGET:0 = 1
;		ABL:TARGET:4 = 0
;		EXP:TARGET:0 = 0
;	ELSEIF RESULT == 1
;		PRINTFORMW ―通常モードで調教を開始します―
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
;	CFLAG:220 = 1
;ENDIF

　エキストラ構文はこのようになっています。まずは、IF CFLAG:220～ENDIFの行頭にある;を消去して、eramakerで構文を読むようにします。

;--------------------------------------------------
;エキストラモード構文　CFLAG:220を使用
;はいを選択した時に初調教時に입上設定用の素質に変更できます
;下記に처녀化する場合の構文をサンプルとして載せておきます
;-------------------------------------------------
IF CFLAG:220 == 0
	PRINTL 처녀モードに移行しますか？
	PRINTL [0] はい
	PRINTL [1] いいえ
	$INPUT_LOOP
	INPUT
	IF RESULT == 0
		PRINTFORMW ―처녀モードに素質、能力を変更します―
		TALENT:TARGET:0 = 1
		ABL:TARGET:4 = 0
		EXP:TARGET:0 = 0
ELSEIF RESULT == 1
		PRINTFORMW ―通常モードで調教を開始します―
	ELSE
		GOTO INPUT_LOOP
	ENDIF
	CFLAG:220 = 1
ENDIF

　基本的にいじるのは、下記の部分のみとなります。

	PRINTL 처녀モードに移行しますか？　←モードの説明、変化する能力などの説明
	PRINTL [0] はい
	PRINTL [1] いいえ
	$INPUT_LOOP
	INPUT
	IF RESULT == 0
		PRINTFORMW ―처녀モードに素質、能力を変更します―　←モード、変化の説明など
		TALENT:TARGET:0 = 1　　 ←
		ABL:TARGET:4 = 0　　　　←変化処理、資料フォルダにある変数番号差異一覧などが参考になります。
		EXP:TARGET:0 = 0　　　　←

　また、イベントによる素質、能力、経験、珠の変動の有無を問うならば、以下のように構文を組むとよいでしょう。

;--------------------------------------------------
;エキストラモード構文　CFLAG:220を使用
;はいを選択した時に初調教時に입上設定用の素質に変更できます
;下記に처녀化する場合の構文をサンプルとして載せておきます
;-------------------------------------------------
IF CFLAG:220 == 0
	PRINTL 입上内のイベントで素質・能力・経験・珠が変動するようにしますか？
	PRINTL [0] はい
	PRINTL [1] いいえ
	$INPUT_LOOP
	INPUT
	IF RESULT == 0
		PRINTFORMW ―素質・能力・経験・珠の変動を有効にしました―
		CFLAG:220 = 1
	ELSEIF RESULT == 1
		PRINTFORMW ―素質・能力・経験・珠の変動を無効にしました―
		CFLAG:220 = -1
	ELSE
		GOTO INPUT_LOOP
	ENDIF
ENDIF

　このとき、素質・能力・経験・珠などを変動する部位をIF CFLAG:220　> 0～ENDIFのIF構文で括れば、有効であるときだけ素質・能力・経験・珠などが加算されるようになります。


【３．입上テンプレートの改造】

　입上テンプレートのデフォルトの条件は基本的に違和感が無い必要最低限のみとなっています。ですので、特別な条件で입上が分岐するようにするには입上テンプレートの条件分岐を改造する必要があります。この項目では、改造に必要な知識と構文を例示していきます。

　・追加する条件について
　입上を派生させる条件は素質、能力、経験などなど様々です。自分の思ったように条件を派生させるとよいでしょう。素質などは資料フォルダの変数番号差異一覧に載っているので、これを参考にするとよいでしょう。
　また、条件を追加する際には、最も厳しい条件を最上部に持ってくる必要があります。

;陥落済み
IF (TALENT:3 || TALENT:4 || TALENT:5 || TALENT:6 || TALENT:7 || TALENT:8) && (CFLAG:300 < 4 || FLAG:7 == 2)
	;연모、친애
	IF TALENT:3 || TALENT:6
		PRINTFORMW 
	;음란、창부
	ELSEIF TALENT:4 || TALENT:7
		PRINTFORMW 
	;복종、예속
	ELSEIF TALENT:5 || TALENT:8
		PRINTFORMW 
	ENDIF
		CFLAG:300 = 4
;친애＋봉사정신LV5以上
ELSEIF TALENT:6 && ABL:7 >= 5 && (CFLAG:300 < 5 || FLAG:7 == 2)
	PRINTFORMW 
	CFLAG:300 = 5
;굴복각인Lv3
ELSEIF MARK:2 == 3 && (CFLAG:300 < 3 || FLAG:7 == 2)
	PRINTFORMW 
	CFLAG:300 = 3
;それ以外
ELSEIF CFLAG:300 < 2 || FLAG:7 == 2
	PRINTFORMW 
	CFLAG:300 = 2
ENDIF

　例えば、上のように構文を組んだ場合、친애＋봉사정신Lv5以上を判定する前に上記の연모、친애の項目を読み込んでしまうため、出ることがありません。この条件を出すには、下記のように연모、친애の条件よりも先に読まれるようにする必要があります。

;친애＋봉사정신LV5以上
IF TALENT:6 && ABL:7 >= 5 && (CFLAG:300 < 5 || FLAG:7 == 2)
	PRINTFORMW 
	CFLAG:300 = 5
;陥落済み
ELSEIF (TALENT:3 || TALENT:4 || TALENT:5 || TALENT:6 || TALENT:7 || TALENT:8) && (CFLAG:300 < 4 || FLAG:7 == 2)
	;연모、친애
	IF TALENT:3 || TALENT:6
		PRINTFORMW 
	;음란、창부
	ELSEIF TALENT:4 || TALENT:7
		PRINTFORMW 
	;복종、예속
	ELSEIF TALENT:5 || TALENT:8
		PRINTFORMW 
	ENDIF
		CFLAG:300 = 4
;굴복각인Lv3
ELSEIF MARK:2 == 3 && (CFLAG:300 < 3 || FLAG:7 == 2)
	PRINTFORMW 
	CFLAG:300 = 3
;それ以外
ELSEIF CFLAG:300 < 2 || FLAG:7 == 2
	PRINTFORMW 
	CFLAG:300 = 2
ENDIF


　・追加条件の参考構文
　ここでは、입上に追加する条件に使える機能などの一例を紹介していきます。

　『PREVCOMについて』
　PREVCOMは前回の調教コマンドのコマンド番号が格納されています。애널セックスの후に펠라치오で反応が変わるなどのシチュエーションを実行できます。

　『RANDについて』
　RANDは、ランダムに数値が代入される変数です。RAND:Xには、0～X-1の数値が格納されます。確立がわかりやすいよう、下記のように構文を組むとよいでしょう。

K:1 = RAND:3
IF K:1 == 0
	PRINTFORMW 
ELSEIF K:1 == 1
	PRINTFORMW 
ELSE
	PRINTFORMW 
ENDIF

　『着衣について（TEQUIP:0～6およびFLAG:1）』
　TEQUIP:0～6は、奴隷が着ている服を示しています。調教コマンド時に着ている服に応じて情景テキストなどを書き換えることが可能です。また、FLAG:1は奴隷の初期着衣設定です。全裸、半脱ぎ、下着姿、全着があります。調教開始時입上において、FLAG:1を参照して、奴隷に服を脱がせたり無理やり脱がせたりするシチュエーションを作ることが可能です。奴隷が着ている服についてはCLOTHES.ERB、調教時に着れる服については、COMABLE.ERBを参照してください。

　『上位陥落素質による分岐』
　입上テンプレートにおいては、연모と친애、음란と창부、복종と예속で입上の内容は同じになっていますが、上位陥落素質によって条件を分岐させたパターンがあると、取得したときの喜びも増すため、追加してみるのもよいでしょう。また、注意点として陥落素質と上位陥落素質は決して重複しないので、注意してください（친애を得ると연모が消えるなど）。

　『能力による分岐』
　調教の成果によって입上を変化させるには、能力(ABL)を参照するとよいでしょう。例としては、奉仕コマンドにおける봉사정신やSM系コマンドにおける마조끼、자위系コマンドの자위중독などがあります。これらは、資料フォルダの変数番号差異一覧に載っているので、参考にしてみるとよいでしょう。

　『후天的な素質による分岐』
　豊가슴縮가슴、후타나리、임신などの主にアイテムなどで取得する素質を参照した条件文があると、面白いでしょう。



　・IF構文について
　IF構文は、ERB書式においては、下記のようになっています。

IF   A
	Aの時の処理
ELSEIF B
	Aで無くBの時の処理
ELSEIF C
	AでもBでも無くCの時の処理
ELSE
	AでもBでもCでも無い時の処理
ENDIF

　IFとENDIFの間に任意の数のELSEIFと一つのELSEのみを入れることができます。また、前項でも述べたように上から順番に読み込まれるため、条件の厳しいものを上に置く必要があります。IFが連続している構文ミスは初心者には特に多いので、注意するとよいでしょう。


　・インデントについて
　입上内の構文は、基本的にインデントがされています。インデントとは、和訳すると窪みのことで構文を見やすくするために用います。インデントはTabキーを使うことででき、Shift+Tabで逆インデントが可能です。また、テキストエディタでは複数行を選択して一度にインデントすることも可能です。
　インデントがされていない場合のIF文は以下のようになります。

IF E
IF A
PRINTFORMW 
ELSEIF B
PRINTFORMW 
ENDIF
ELSE
IF C
IF D
PRINTFORMW 
ELSE
PRINTFORMW 
ENDIF
ELSE
PRINTFORMW 
ENDIF
ENDIF

　これだと、IF構文の構造が非常にわかりにくいですが、インデントをすると以下のようになります。

IF E
	IF A
		PRINTFORMW 
	ELSEIF B
		PRINTFORMW 
	ENDIF
ELSE
	IF C
		IF D
			PRINTFORMW 
		ELSE
			PRINTFORMW 
		ENDIF
	ELSE
		PRINTFORMW 
	ENDIF
ENDIF

　インデントのルールは、IF文の中身を一つインデントするを繰り返すと考えて差し支えありません。インデントをしっかりすることで、입上ファイルの可読性を向上し、バグの修正なども楽になります。


　・各種、記号について
　입上ファイル内では、変数の数値を指定する記号と単語の条件を区分する記号があります。まず、単語の数値を指定する記号は以下のようになっています。

・単語の数値を指定する記号
==　左辺の単語と右辺の数値が等しい時
!=　左辺の単語と右辺の数値が等しくない時
>=　左辺の単語が右辺の数値よりも大きいか等しい時
>　 左辺の単語が右辺の数値よりも大きい時
<=　左辺の単語が右辺の数値よりも小さいか等しい時
<　 左辺の単語が右辺の数値よりも小さい時

　=は左辺の単語に右辺の数値を代入する指示なので、条件文に使うとエラーが起こります。また、右辺に数値を指定していない場合は、!= 0と同じ扱いで、素質は0か1しか無いので取得済みを条件にしている場合は右辺を省略することができます。
　単語を繋げる記号は、以下のようになっています。

・単語を繋げる記号、これらで数値代入された単語を繋げて条件文となる
&&　右辺と左辺の条件をどちらも満たすことが条件
||　右辺か左辺の条件をどちらかが満たしていることが条件
()　括弧で括られた部分を一つの単語として扱うことができる

　例えば、下記の構文では、MARK:2 == 3かつ、CFLAG:300 < 3かFLAG:7 == 2となっています。ここで、括弧を使って一つの単語として扱わないと、MARK:2 == 3かつCFLAG:300 < 3か、FLAG:7 == 2となり、FLAG:7が2であるだけで条件が有効になってしまいます。それ以外においては、条件を判定する単語が二つなので、括弧で括る必要がありません。

;굴복각인Lv3
ELSEIF MARK:2 == 3 && (CFLAG:300 < 3 || FLAG:7 == 2)
	PRINTFORMW 
	CFLAG:300 = 3
;それ以外
ELSEIF CFLAG:300 < 2 || FLAG:7 == 2
	PRINTFORMW 
	CFLAG:300 = 2


　・입上表示頻度について
　입上テンプレートでは、입上の表示頻度が設定されています。FLAG:7が1で一回だけ表示、2で常に表示、3で非表示です。この処理は各構文ごとに行われています。

입上表示頻度記録用の条件文の説明と追加方法の解説

　例えば、애무の입上表示頻度の記録処理は以下のようになっています。

IF SELECTCOM == 0
	IF CFLAG:300 == 0
		CFLAG:300 = 1
	ELSE
		IF CFLAG:300 < 4 || FLAG:7 == 2
			CFLAG:300 = 4
		ELSEIF CFLAG:300 < 3 || FLAG:7 == 2
			CFLAG:300 = 3
		ELSEIF CFLAG:300 < 2 || FLAG:7 == 2
			CFLAG:300 = 2
		ENDIF
	ENDIF
ENDIF

　このように、CFLAG:300が0の場合は一番上が呼ばれ、1以上の時には、ELSEの二回目以降が呼び出されます。さらに、二回目以降では、CFLAG:300がX未満、もしくはFLAG:7が2（常に表示）の時という条件になっており、この条件を一度でも表示したらCFLAG:300にXが代入されています。FLAG:7が1(一回だけ表示）の場合には、Xが代入されている（一回でも表示されている）とX未満が条件の입上が表示されません。
　条件を増やす場合には、下記のようにXの数値を1づつ増やしていけばできます。

IF SELECTCOM == 0
	IF CFLAG:300 == 0
		CFLAG:300 = 1
	ELSE
		IF CFLAG:300 < 6 || FLAG:7 == 2
			CFLAG:300 = 6
		ELSEIF CFLAG:300 < 5 || FLAG:7 == 2
			CFLAG:300 = 5
		ELSEIF CFLAG:300 < 4 || FLAG:7 == 2
			CFLAG:300 = 4
		ELSEIF CFLAG:300 < 3 || FLAG:7 == 2
			CFLAG:300 = 3
		ELSEIF CFLAG:300 < 2 || FLAG:7 == 2
			CFLAG:300 = 2
		ENDIF
	ENDIF
ENDIF

　増やした構文でIF-ENDIF構文を作ること、最も厳しい条件を一番上に持ってくること、CFLAG:300 < X || FLAG:7 == 2を一単語として扱うために、(CFLAG:300 < X || FLAG:7 == 2)と括弧で括る必要があることにご注意ください。


【４．입上テンプレートの構造】

　知らなくてもいいけど、役に立つかもしれない情報などのまとめ。
　입上テンプレートは、以下の関数で構成されています。
　
調教開始時（@EVENTTRAIN）
表示二回目以降の調教開始時(@EVENTTRAIN_SECOND_KX1)
調教終了時（@EVENTEND）
調教コマンド実行時（KOJO_MESSAGE_COM_KX1）
調教者の사정時（@KOJO_MESSAGE_PALAMCNG_A_KX1）
촉수の사정時（@KOJO_MESSAGE_PALAMCNG_E_KX1）
奴隷の絶頂時（@KOJO_MESSAGE_PALAMCNG_B_KX1）
調教후の変化（@KOJO_MESSAGE_PALAMCNG_C_KX1）
奴隷のパラメータ変化時（@KOJO_MESSAGE_PALAMCNG_D_KX1）
刻印取得時（@KOJO_MESSAGE_MARKCNG_KX1）
調教外イベント発生時（@KOJO_MESSAGE_EVENT_KX1）
エンディング입上（@KOJO_MESSAGE_ENDING_KX1）

　これらの他に입上の存在判定関数とエンディング判定関数があります。


　・関数呼び出しフローチャート
　입上テンプレートの関数呼び出しをフローチャートにすると、以下のようになっています。下に行く場合は条件を満たしている（TRUE)、右に逸れている場合は満たしていない場合（FALSE）です。


調教開始
　 ↓
調教開始時입上（@EVENTTRAIN）
　 ↓
初回及び能力変化후初回でなく、簡易助손掛け合い입上のあるキャラが助손でない
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
表示二回目以降の調教開始時입上(@EVENTTRAIN_SECOND_KX1)　　　　　 ↓
 　↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
 　↓
調教画面→調教終了を選択→調教終了時입上（@EVENTEND）→調教후イベント（@KOJO_MESSAGE_EVENT_KX1）→調教終了処理
　 ↓
　 ↓
調教コマンド実行
　 ↓
調教コマンド実行時입上（KOJO_MESSAGE_COM_KX1）
　 ↓
調教の数値処理
 　↓
調教者が사정した場合 →→→→→→→→→→→→→→→→→→→→→→→→
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
調教者の사정時입上（@KOJO_MESSAGE_PALAMCNG_A_KX1）　　　　　　　　 ↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  ↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
　 ↓
촉수が사정した場合 →→→→→→→→→→→→→→→→→→→→→→→→→
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
촉수の사정時입上（@KOJO_MESSAGE_PALAMCNG_E_KX1）　　　　　　　　　 ↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
　 ↓
奴隷が絶頂した場合 →→→→→→→→→→→→→→→→→→→→→→→→→
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
奴隷の絶頂時입上（@KOJO_MESSAGE_PALAMCNG_B_KX1）　　　　　　　　　 ↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  ↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
　 ↓
調教후の変化があった場合 →→→→→→→→→→→→→→→→→→→→→→
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
調教후の変化時입上（@KOJO_MESSAGE_PALAMCNG_C_KX1）　　　　　　　　 ↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  ↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
　 ↓
奴隷のパラメータの変化があった場合 →→→→→→→→→→→→→→→→→
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
奴隷のパラメータ変化時입上（@KOJO_MESSAGE_PALAMCNG_D_KX1）　　　　 ↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  ↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
　 ↓
奴隷が刻印を取得した場合 →→→→→→→→→→→→→→→→→→→→→→
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　↓
刻印取得時입上（@KOJO_MESSAGE_MARKCNG_KX1）　 　　　　　　　　　　 ↓
　 ↓　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　  ↓
 　↓←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←←
　 ↓
調教画面に戻る

補발：イベント입上関数（@KOJO_MESSAGE_EVENT_KX1）は、他の場面でも呼ばれる。
　　　エンディング입上関数（@KOJO_MESSAGE_ENDING_KX1）は、設定をしていて条件を満たした場合にエンディングのときに呼ばれる。


【５．デバックについて】

　입上が完成したら、まずはバグが無いかを調べましょう。こちらのページ（http://www7.atwiki.jp/eratoho/pages/103.html）にある、ERBCheckerやEmueraでバグのチェックができるので、アップロードする前に試して起きましょう。また、チェッカーも万能ではないので、입上の内容の推敲や意図した動作をするかを確認するのには、自分で実際にプレイしてみるのが、よいでしょう。


