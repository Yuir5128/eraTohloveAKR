☆eraSQRの입上書きのためのTipsをerahetaA仕様に書き換えたもの
  新版テンプレートを使うために有用そうな知識を書いておこうと思います

;--□　初級編　□-----------------------------------------------------------------------------------

@何は無くともサクラエディタを使いましょう
  メモ帳で記述している方は、是非サクラエディタを導入してみてください。
  バグを抑止でき、作業効率が上がります。
  
  Wikiに開発用ツールの記載があります。
  http://www26.atwiki.jp/erasq/pages/51.html


@記入チェックと小分岐の追加/削除
例1）
  ;-------------------------------------------------
  LOCAL = 1
  ;-------------------------------------------------
  IF LOCAL
  	;-------------------------------------------------
  	;小分岐
  	;-------------------------------------------------
  	;연모ルート
  	;記入チェック
  	LOCAL:1 = 0
  	;-------------------------------------------------
  	IF LOCAL:1 && (TALENT:3 || TALENT:6)
  		PRINTFORMW 
  		RETURN LOCAL
  	ENDIF
  	;-------------------------------------------------
  	;음란ルート
  	;記入チェック
  	LOCAL:1 = 1
  	;-------------------------------------------------
  	IF LOCAL:1 && (TALENT:4 || TALENT:7)
  		PRINTFORMW ご主人さまえろいことしよ！
  		RETURN LOCAL
  	ENDIF
  	;-------------------------------------------------
  	;복종ルート
  	;記入チェック
  	LOCAL:1 = 1
  	;-------------------------------------------------
  	IF LOCAL:1 && (TALENT:5 || TALENT:8)
  		PRINTFORMW 僕はご主人様の犬です！
  		RETURN LOCAL
  	ENDIF
  ;一般
  	PRINTFORMW ご主人様とかないわー
  	RETURN LOCAL
  ENDIF
  
例2）
  ;음란ルート
  IF TALENT:4 || TALENT:7
  	PRINTFORMW ご主人さまえろいことしよ！
  ;복종ルート
  ELSEIF TALENT:5 || TALENT:8
  	PRINTFORMW ご主人様大好き！
  ;それ以外
  ELSE
  	PRINTFORMW ご主人様とかないわー
  ENDIF

  例1は例2と同じ条件になります。
  例2に연모ルートの時の条件を付け加えるためにはIF文を書き換えなければなりませんが、
  例1は記入チェックを入れるだけで済みます。
  また、新しい条件を付けたい時も입上用小分岐テンプレートなどから小分岐ごとコピペすればおｋ
  注意点は小分岐の上から条件に当てはまれば表示＆戻る(RETURN)しているので、
  「陥落済み」の下に「연모ルートの場合」を置いたりすると死に分岐になります。


@입上内で地の文を書く場合
  普通にPRINTFORM(またはPRINTFORML, PRINTFORMW)を使用して記述すると、そのキャラの文字色になってしまいます。
  デフォルトの文字色で記述するにはPRINTFORMD(またはPRINTFORMDL, PRINTFORMDW)を使用してください。


@ランダムに表示させたい場合１
  Emuera専用バリアントだからといって臆することはありません。eramakerと同様の構文が使用可能です。
  ただし、変数を使用したい場合(후から表示結果を使う場合)は、一文字変数(A-Z)ではなくLOCALを使用するようにしてください。
  LOCALはLOCAL:0～LOCAL:999まで使えますが、先頭のいくつかはテンプレートで使用しています。LOCAL:2などを使うと良いでしょう。
  注意として、LOCALに保持された変数はその関数内でしか使用出来ません。もし他の関数から利用したい場合はCFLAG等を使用することになります。
  
  例1)変数無し              例2)変数有り
    IF RAND:3 == 0            LOCAL:2 = RAND:3
        PRINTFORML 表示１     IF LOCAL:2 == 0
    ELSEIF RAND:2 == 0            PRINTFORML 表示１
        PRINTFORML 表示２     ELSEIF LOCAL:2 == 1
    ELSE                          PRINTFORML 表示２
        PRINTFORML 表示３     ELSE
    ENDIF                         PRINTFORML 表示３
                              ENDIF


@調教中一度づつ表示させたい場合
  ONCE関数を使います。引数は被らないようにメモりつつ使うといいでしょう。
  
  IF ONCE(1)
  	PRINTFORMW 「가슴触るの」
  ELSEIF ONCE(2)
  	PRINTFORMW 「また가슴？」
  ELSE
  	PRINTFORMW 「가슴ばっかり…もう飽きた」
  ENDIF
  
  가슴주무르기に上記例文を入れた場合、同じ調教で가슴주무르기一回目「가슴触るの」
  가슴주무르기二回目「また가슴？」、가슴주무르기三回目「가슴ばっかり…もう飽きた」と表示されます
  ONCE関数は調教終了でリセットされます。
  
  同じ引数を複数個所に使うことで、調教開始→가슴주무르기「가슴触るの」→
  유두고문「また가슴？」→유두로터「가슴ばっかり…もう飽きた」みたいな表示も出来ます
  
  またFIRSTTIME関数も、同じ引数を複数個所で使用することで
  「수공애널を問わず初めてのセックス」「初めて페니스を弄られた」のような分岐が作れます。


@昼夜の判定をしたい場合
  TIME変数を参照してください。0なら昼、そうでない場合は夜です。
  
  例1)IFを使用する場合          例2)三項演算子を使用する場合
    IF TIME == 0                  PRINTFORML \@ TIME == 0 ? こんにちは # こんばんは \@
        PRINTFORML こんにちは   ※三項演算子については中級編に詳しい記述があります
    ELSE
        PRINTFORML こんばんは
    ENDIF


@配列の文字列による参照
  EmueraにはCSVに書かれた文字列によって配列を参照する機能があります。
  たとえば、「Mark.csv」に「2,굴복각인」という行があったとします。
  通常、これを参照する場合は MARK:2 と記述しますが、
  Emueraでは MARK:굴복각인 と記述することも可能です。


@デバッグについて
  最低限、Emueraの設定(解析タブ)で以下の設定をしましょう。
  表示する最低警告レベル    0:標準でない文法
  ロード時に引数を解析する  常に行う
  また、最新のEmuera(私家改造版)でチェックを行うことをオススメします。



;--□　中級編　□-----------------------------------------------------------------------------------

@気を付けておきたいポイント
  ・eramaker/Emueraには、整数型と文字列型しかありません。
    (真偽値を扱う専用の型とか、実数型は無いということです)
  
  ・IF ～～ や SIF ～～ の「～～」の部分は整数型が入ります。
    0ならば偽(条件を満たさない)、0以外なら真(条件を満たす)となります。
    (つまりIF X != 0 というのは同じ計算を2度やっているに等しく、IF X で済むということになります)
  
  ・素質を持っているかどうかを判定するのに、IF TALENT:0 == 1のように記述するのは好ましくありません。
    持っていない状態がTALENT:0 == 0なので、持っている状態はその反対、つまりTALENT:0 != 0なのです。
    (1だろうが2だろうが-3だろうが、何かしら持っていることには違いありません)
    これと先程の項目を合わせると、素質を持っているかどうかを判定するのにはIF TALENT:0と書けばよいということがわかります。
    IF TALENT:0 == 1で困るのは、あとから「재생처녀はTALENT:0に2を入れて区別しよう」などと決めた場合に、正しく「처녀」であることが判定できなくなります。
    0でない数字との比較を書く必要があるのは、その素質に上位素質等があり区別が必要になる箇所のみです。
  
  ・TARGETやASSIといったキャラ登録番号の有効な値の範囲は0～CHARANUM-1です。TARGETやASSIが不在の場合は-1が入ります。
    この状態でTALENT:ASSI:0のような参照をするとエラーになるので注意が必要です。
    ASSIが存在しているかを見るにはIF ASSI >= 0のように書きます。存在していない場合を判定したいならIF ASSI < 0です。
    とはいえ、通常MASTERが0に収まるので、実際のところTARGETやASSIの範囲は1～CHARANUM-1と思っても差し支えないと思います。
    よってIF ASSI >= 0やIF ASSI <= 0のように書いても大丈夫かと。この辺は好みかもしれません。
    (何かの拍子にMASTERが世代交代するなんてことが無ければ…)
    (とはいえ、普通はMASTERが0のままになるよう細工すると思いますが)
    후述の短絡評価についても読まれることをオススメします。
  
  ・割り算をするときは割る数が0になるケースが無いか注意しましょう。0による除算はエラーになります。
    特に、割る数が計算式になっている場合は要注意です。
    (とはいえ、これは動かせばわかるレベルのエラーですが。正しく動いているように見えて実は間違っているというのが一番性質が悪いです)


@分割テンプレートについて
  テンプレ作成時に分割テンプレートを選ぶと、その후の管理が少し便利になります。(個人差はありますが)
  一体型に特別なこだわりがなければ、一度お試しください。
  生成されたフォルダごと입上フォルダに入れればＯＫです。
  初めは落ち着かないかもしれませんが、慣れると多分良さが伝わるのではないかと。


@対象限定テンプレートについて
  テンプレ作成時に対特定キャラ用テンプレートとして作成し、KOJO_K○.ERBの입上セレクタ、
  ;SIF NO:MASTER == ○
  ;	RESULTS = _NO○
  ↑部分のコメントアウトを解き○にキャラ固有番号を入れる
  主人が対象キャラの場合対特定キャラ用テンプレートから입上が呼ばれ、
  記入チェックがなければ対象非限定テンプレートから呼ばれる
  
  例えばコマンド입上部分については、対象限定テンプレートがあり主人が対象キャラの場合
  
  新テンプレで対象限定個別입上が書かれているか
  ↓
  新テンプレで対象限定汎用コマンドが書かれているか
  ↓
  新テンプレで対象非限定個別입上が書かれているか
  ↓
  新テンプレで対象非限定汎用입上が書かれているか
  ↓
  입上が書かれていなければ地の文表示
  
  という順番で確認されます。
  対象非限定입上に加筆という使い方が便利かと思います。


@変数を使用する場合
  一文字変数(A-Z)は使用しないのが望ましいです。一文字変数は各所で使われており、データを破壊してしまう可能性があります。
  基本的にはLOCAL変数の空いている箇所(例えばLOCAL:2とか)を使用してください。
  但し、LOCALに保持された変数はその関数内でしか使用出来ません。
  もし他の関数からも利用するような場合は引数として渡すか、CFLAG/TFLAGなどを使用するのが望ましいです。


@調教対象の呼び名を設定する場合
  MASTERNAME変数やNICKNAME変数を使用すると、キャラ別の管理が可能です。CSTR変数でも可です。
  (システム側でMASTERNAMEとNICKNAME、CSTR:50～は使用する予定は無いので自由にお使いください)
  SAVESTR変数はキャラ変数でないので、他所と衝突する危険性が大きいです。
  
  以下のように使用します(主人が"あなた"の場合)
    MASTERNAME = %CALLNAME:MASTER%
    NICKNAME = お兄ちゃん
    PRINTFORML 「%MASTERNAME%なんて%NICKNAME%じゃないやい！」
  結果は以下になります
    「あなたなんてお兄ちゃんじゃないやい！」

@調教対象/調教者/助손以外の第三者の名前を人名⇔国名表示切り替え機能対応で表示する関数
  指定したキャラ固有番号に対応するキャラの名前を人名⇔国名表示切り替え機能対応で表示します。
  
  PRINTFORML 「%NATION_OR_H(1)%！」
  人名表示の時 = 「フェリシアーノ！」
  国名表示の時 = 「イタリア！」
  
  PRINTFORML 「%NATION_OR_H(2,1)%」
  人名時の時「ロヴィーノ・ヴァルガス」


@ランダムに表示させたい場合２
  Emueraでは!(論理부정・NOT)が使えるため、例1のように記述することが出来ます。
  また、例2のようにSELECTCASEを使うことも可能です。
  単一の値でのみ分岐するような箇所にはSELECTCASE、複数の値で分岐する箇所にはIFが適していると思います。
  が、입上で用いるなら基本的にIFで書いた方が、후から条件を追加出来るので無難かもしれません。(最終的には適材適所ですが…)
  
  例1)IFによる分岐          例2)SELECTCASEによる分岐
    IF !RAND:3                SELECTCASE RAND:3
        PRINTFORML 表示１         CASE 0
    ELSEIF !RAND:2                    PRINTFORML 表示１
        PRINTFORML 表示２         CASE 1
    ELSE                              PRINTFORML 表示２
        PRINTFORML 表示３         CASEELSE
    ENDIF                             PRINTFORML 表示３
                              ENDSELECT


@文字列の三項演算子
  文字列の三項演算子を用いると、PRINTFORM文中で判定を行い表示結果を分岐させることができます。
  
  構文は以下の通りです。
    \@ <条件式> ? <文字列１> # <文字列２> \@
  条件式が真の場合は文字列１、偽の場合は文字列２となります。
  
  以下のように使用します。
    PRINTFORML あなた\@ TALENT:MASTER:남자 ? 男の子 # 女の子 \@でしょ！
  結果は以下になります。
        (MASTERが남자の場合)あなた男の子でしょ！
    (MASTERが남자以外の場合)あなた女の子でしょ！
  
  \@～\@の部分が評価されて文字列になるので、その前후に空白を入れるとそのまま表示されてしまいます。
    (よくない例:構文) PRINTFORML あなた \@ TALENT:MASTER:남자 ? 男の子 # 女の子 \@ でしょ！
                                       ↑ここの空白が余計                           ↑ここの空白が余計
    (よくない例:結果) あなた 男の子 でしょ！
                            ↑     ↑このように空白がそのまま表示される


@特殊な文字の表示
  通常、입上ファイル中にハートマークなどを書くことは出来ません。
  ハートマークを表示するには以下のようにします。
  PRINTFORML うふふ%UNICODE(0x2661)%
  0x2661が文字コードにあたります。詳しくはUnicodeの文字コード表などを参照してください。
  そのうち、もっと良いハートマーク表示用の仕組みが導入されるかもしれません。


@ビット演算について
  Emueraにはビット演算用の便利な命令があります。
  GETBIT <変数>, <ビット位置>       ビットを取得します。
  SETBIT <変数>, <ビット位置>       ビットを設定します。
  CLEARBIT <変数>, <ビット位置>     ビットを0にします。
  INVERTBIT <変数>, <ビット位置>    ビットを反転(0⇔1)します。
  なお、GETBITは文中関数版もあります。
  判定できるビット位置は0～63までです。
  
  IF GETBIT(FLAG:1, 0)
  IF FLAG:1 & 1
  上の二行は同じ結果になります


@短絡評価について１
  Emueraはeramakerと異なり短絡評価を行います。
  短絡評価とは、条件式の途中で式全体の結果が決まる場合、以降の判定を打ち切る評価の仕方です。
  IF TALENT:MASTER:0 || TALENT:MASTER:1
  だと、TALENT:MASTER:0が真ならその時点で式全体が真なので、TALENT:MASTER:1の判定はしないということです。
  これが影響するのは以下のような式です。
  IF ASSI >= 0 && TALENT:ASSI:0
  この式はeramakerだとASSI不在(ASSIが-1)の場合にエラーになります。(TALENT:-1:0を見に行くため)
  しかしEmueraではASSI >= 0の段階で式全体が偽になることがわかっているため、TALENT:ASSI:0の判定を行いません。
  よってEmueraではエラーになりません。


@연모・복종陥落を調べる関数１
  式中関数MASTER_SEARCH2を使うとキャラ１の思慕・畏怖対象がキャラ２であるかどうか判定できます。
  使用例）
  
  ;調教対象の思慕・畏怖対象が主人である
  IF MASTER_SEARCH2(TARGET, MASTER)
  
  ;助손の思慕・畏怖対象が調教対象である
  IF MASTER_SEARCH2(ASSI, TARGET)
  
  ;フェリシアーノの思慕・畏怖対象が主人である
  R = 1
  CALL NO
  IF M && MASTER_SEARCH2(M, MASTER)


@연모・복종陥落を調べる関数２
  式中関数KANRAKUをつかうとキャラがどの陥落ルートか判定できます。
  戻り値が0=未陥落、1=연모ルート、2=음란ルート、3=복종ルートです。
  
  使用例）
  ;調教対象が연모ルートで陥落済み
  IF KANRAKU(TARGET) == 1
  
  ;助손が未陥落
  IF !KANRAKU(ASSI)


@WinMergeを使ってみましょう
  입上テンプレートは発展途上なので更新されます。更新頻度については何とも言えませんが…
  その更新分を書きかけの입上に適用しようと思うと結構大変だったりします。(なので無理にやらなくてもいいです)
  そんな場合、WinMergeを使うと差分の抽出やマージが比較的楽に行えます。
  以下の3ファイルをWinMergeにかければ大体のケースに対処出来るのではないかと。
  ファイル１：書きかけの입上
  ファイル２：出力した新テンプレ
  ファイル３：出力した旧テンプレ(書きかけ입上の元ファイル)
  ※分割テンプレートを使用していると差分抽出が楽かもしれません
  
  http://www.geocities.co.jp/SiliconValley-SanJose/8165/winmerge.html



;--□　上級編　□-----------------------------------------------------------------------------------

@ループを書く場合
  可能ならばREPEATを使わずに、LOCAL変数を使ってFOR文やWHILE文、DO-LOOP文で記述するようにしてください。
  REPEATを使用すると、稀に呼び出し元のCOUNT変数を破壊して良くないことが起きる可能性があります。


@ランダムに表示させたい場合３
  EmueraではPRINTDATA構文を用いることでRANDを使わずに表示を出し分けることも出来ます。
  ただし、複数行に渡るセリフの表示にはあまり向かないと思います。(可能ですが行数が長くなります)
  地の文と混ぜることも出来ません。(別個にPRINTDATADが必要)
  また、全ての分岐は等確率になります。
  입上内で有効に利用できる場面は非常に限定的だと思いますが、興味のある方はEmuera(私家改造版)の更新履歴を参照してみてください。
  どちらかというと、ランダムにセリフを組み立てるような処理向きだと思います。喘ぎ声とか？
  
  例)PRINTDATAによる分岐(PRINTDATAWを使用)
    PRINTDATAW
        DATAFORM 表示１
        DATAFORM 表示２
        DATAFORM 表示３
    ENDDATA


@書式付文字列定数
  ""で括られた箇所は文字列として扱われますが、@""で括られた箇所は書式付文字列として扱われます。
  (FORM文字列、といった方がわかりやすいかもしれません)
  一部の命令で書式付文字列がうまく展開されない場合は、これを試してみるとよいでしょう。


@自作関数を定義する場合
  特に決まりは無いのですが、分割テンプレートを使用している場合はKOJO_FUNC_KX1.ERBのような名前で別ファイルに纏めるとよいでしょう。
  ただし、多くの입上から利用可能な関数はキャラ番号によらない別ファイルに分けたほうがよいでしょう。
  自身の입上内でしか利用しない関数には、名前にKX1のようなキャラ番号を付加すると衝突がある程度回避できます。


@短絡評価について２
  SIF 1 || FIRSTTIME(300)
      PRINTL ほげほげ
  のような構文では、1の段階で条件式全体が真であると確定するため、FIRSTTIME(300)が呼ばれることはありません。
  このため、未読判定が更新されることもありません。
  このようなデータを書き換えるタイプの文中関数を使用する場合は注意が必要です。
  というか文中関数で不用意にフラグを書き換えると危ないということでもありますｗ


@デバッグモードについて
１．Emueraのデバッグコマンドを使う
  Emueraを起動し、画面左上のヘルプ＞設定＞環境タブの"デバッグコマンドを使用する"にチェックを入れてください。
  ゲーム中に"@"で始まる文字列を入力するとデバッグコマンドとして수付けられるようになります。
  デバッグコマンドはERBと同じ書式で指定します。
  例えば、
  
  @MONEY = 10000
  @PRINTV FLAG:200
  @PRINTFORM %NAME:MASTER%のCFLAG(1) = {CFLAG:MASTER:1}
  @ADDCHARA 1
  
  のように書いてください。
  ただしIFやCALLのようなスクリプトの流れを変える命令や、INPUTやWAITのように入力を要求する命令は使えません。 
  なお、デバッグコマンドを使用するとMASTERの名前・呼び名が強制的に"イカサマ"になります。
  
２．おまけフォルダ内デバッグモードファイルを使用する
  フォルダ内のDEBUGMENU.ERBをERBフォルダに入れ、SHOP.ERBなどにデバッグメニュー呼び出しを追加して下さい。
  調教対象の依存度、ストレスの変化処理、陥落系素質や主人の素質着脱処理、思慕対象者チェック、임신確率変動ができます。

  erahetaA私家改造版では陥落と同時に陥落用フラグが入るようになっています。
  そのため、１のデバッグコマンドで素質だけ追加するとうまく動きません。
  陥落후のデバッグをするときは２のデバッグモードの陥落系素質着脱から素質を付けるようにしてください。

